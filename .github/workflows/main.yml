name: CI/CD [main]

env:
  CI: true
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches: [main]

jobs:
  install:
    runs-on: ubuntu-20.04
    name: Install & cache dependencies ⏬
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install & cache project dependencies
        run: yarn install --frozen-lockfile
      - name: Install Vercel CLI
        run: yarn global add vercel@canary

  commitlint:
    needs: install
    runs-on: ubuntu-20.04
    name: Check commit message 💬
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install all dependencies from cache
        run: yarn install --frozen-lockfile
      - name: Run commitlint
        uses: wagoid/commitlint-github-action@v5

  code-quality:
    needs: install
    runs-on: ubuntu-20.04
    name: Typecheck & Linting 🎖
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install all dependencies from cache
        run: yarn install --frozen-lockfile
      - name: Run TS check
        run: yarn type-check
      - name: Run ESLint
        run: yarn lint

  unit-tests:
    needs: install
    runs-on: ubuntu-20.04
    name: Unit Tests 🧪
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install all dependencies from cache
        run: yarn install --frozen-lockfile
      - name: Run Unit Tests
        run: yarn test:ci

  deploy-preview:
    needs: [commitlint, code-quality, unit-tests]
    runs-on: ubuntu-20.04
    name: Deploy to Vercel Preview 🚀
    outputs:
      preview-url: ${{ steps.deploy-preview-url.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install Vercel CLI
        run: yarn global add vercel@canary
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
      - name: Set preview url to output
        id: deploy-preview-url
        run: echo "::set-output name=preview-url::$(cat deployment-url.txt)"
      - name: Preview URL available
        run: echo "${{ steps.deploy-preview-url.outputs.preview-url }}"

  e2e-tests:
    needs: [deploy-preview]
    runs-on: ubuntu-20.04
    name: E2E Tests 🌎
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install all dependencies from cache
        run: yarn install --frozen-lockfile
      - name: Install Playwright dependencies
        run: npx playwright install --with-deps
      - name: Run e2e tests
        run: yarn test:e2e
        env:
          BASE_URL: ${{needs.deploy-preview.outputs.preview-url}}

  deploy-production:
    needs: [e2e-tests]
    runs-on: ubuntu-20.04
    name: Deploy to Vercel Production 🚀🚀
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install Vercel CLI
        run: yarn global add vercel@canary
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
